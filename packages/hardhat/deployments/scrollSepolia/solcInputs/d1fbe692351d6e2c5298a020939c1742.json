{
  "language": "Solidity",
  "sources": {
    "contracts/AdSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport \"./interfaces/IAdSlot.sol\";\n\n/// @title AdSlot Implementation\n/// @notice Implements advertisement slot functionality with bidding and fee management\n/// @dev Controlled by AdSlotController contract\ncontract AdSlot is IAdSlot {\n    // ============ State Variables ============\n\n    address payable public override _owner;\n    address payable public immutable override i_controllerContract;\n    BidInfo public override _currentBid;\n    uint256 public override _feeBalance;\n    uint256 public immutable override i_deploymentBlock;\n\n    // ============ Errors ============\n\n    error OnlyController();\n    error ZeroAddress();\n    error SameOwner();\n    error LowBid();\n    error NoFees();\n    error RefundFailed();\n    error FeeTransferFailed();\n    error WithdrawalFailed();\n\n    // ============ Modifiers ============\n\n    modifier onlyController() {\n        if (msg.sender != i_controllerContract) revert OnlyController();\n        _;\n    }\n\n    // ============ Constructor ============\n\n    /// @dev Initializes contract with owner and controller addresses, and records deployment block\n    constructor(address payable owner, address payable controllerContract) {\n        _owner = owner;\n        i_controllerContract = controllerContract;\n        i_deploymentBlock = block.number;\n        emit OwnershipTransferred(address(0), owner);\n    }\n\n    // ============ Administrative Functions ============\n\n    /// @dev Processes ownership transfer with validation checks\n    function transferOwnership(address payable newOwner) external override onlyController {\n        if (newOwner == address(0)) revert ZeroAddress();\n        if (newOwner == _owner) revert SameOwner();\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    // ============ Bidding Functions ============\n\n    /// @dev Processes new bid with fee distribution and previous bid refund\n    function placeBid(address bidder, string calldata adImageCID) external payable override onlyController {\n        if (msg.value <= _currentBid.amount) revert LowBid();\n\n        uint256 totalFee = msg.value / 10;\n        uint256 ownerFee = (totalFee * 7) / 10;\n        uint256 controllerFee = totalFee - ownerFee;\n\n        BidInfo memory previousBid = _currentBid;\n        if (previousBid.bidder != address(0)) {\n            uint refundAmount = previousBid.amount - (previousBid.amount / 10);\n            (bool refundSuccess,) = payable(previousBid.bidder).call{value: refundAmount}(\"\");\n            if (!refundSuccess) revert RefundFailed();\n            emit BidRefunded(previousBid.bidder, refundAmount);\n        }\n\n        _feeBalance += ownerFee;\n        (bool success,) = i_controllerContract.call{value: controllerFee}(\"\");\n        if (!success) revert FeeTransferFailed();\n        emit ControllerFeeTransferred(controllerFee);\n\n        _currentBid = BidInfo({\n            bidder: bidder,\n            amount: msg.value,\n            adImageCID: adImageCID,\n            timestamp: block.timestamp\n        });\n        emit NewBid(bidder, msg.value, adImageCID);\n    }\n\n    // ============ Fee Management Functions ============\n\n    /// @dev Processes fee withdrawal to slot owner\n    function withdrawFees() external override onlyController {\n        if (_feeBalance == 0) revert NoFees();\n\n        uint256 amount = _feeBalance;\n        _feeBalance = 0;\n        (bool success,) = _owner.call{value: amount}(\"\");\n        if (!success) revert WithdrawalFailed();\n        emit FeeWithdrawn(_owner, amount);\n    }\n}\n"
    },
    "contracts/AdSlotController.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport \"./interfaces/IAdSlot.sol\";\nimport \"./interfaces/IAdSlotController.sol\";\nimport \"./AdSlot.sol\";\n\n/// @title AdSlotController Implementation\n/// @notice Implements centralized management of multiple advertisement slots\n/// @dev Main contract for creating and managing AdSlot contracts\ncontract AdSlotController is IAdSlotController {\n    // ============ State Variables ============\n\n    address payable public override _owner;\n    mapping(address => AdSlotInfo) public override _adSlots;\n    AdSlotInfo[] private _adSlotAddresses;\n    uint256 public immutable override i_deploymentBlock;\n\n    // ============ Errors ============\n\n    error OnlyOwner();\n    error ZeroAddress();\n    error SameOwner();\n    error OnlySlotOwner();\n    error LowBid();\n    error NoBalance();\n    error TransferFailed();\n\n    // ============ Modifiers ============\n\n    modifier onlyOwner() {\n        if (msg.sender != _owner) revert OnlyOwner();\n        _;\n    }\n\n    // ============ Constructor ============\n\n    /// @dev Initializes contract with deployer as owner and records deployment block\n    constructor() {\n        _owner = payable(msg.sender);\n        i_deploymentBlock = block.number;\n        emit OwnershipTransferred(address(0), msg.sender);\n    }\n\n    // ============ Receive & Fallback ============\n\n    /// @dev Processes direct ETH transfers\n    receive() external payable {\n        emit FeeReceived(msg.sender, msg.value);\n    }\n\n    /// @dev Processes unknown function calls with ETH\n    fallback() external payable {\n        emit FeeReceived(msg.sender, msg.value);\n    }\n\n    // ============ Administrative Functions ============\n\n    /// @dev Processes controller ownership transfer with validation\n    function transferOwnership(address payable newOwner) external override onlyOwner {\n        if (newOwner == address(0)) revert ZeroAddress();\n        if (newOwner == _owner) revert SameOwner();\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /// @dev Processes ad slot ownership transfer\n    function transferAdSlotOwnership(address adSlotAddress, address payable newOwner) external override {\n        IAdSlot adSlot = IAdSlot(adSlotAddress);\n        if (msg.sender != adSlot._owner()) revert OnlySlotOwner();\n        adSlot.transferOwnership(newOwner);\n    }\n\n    /// @dev Processes controller fee withdrawal\n    function withdraw() external override onlyOwner {\n        uint amount = address(this).balance;\n        if (amount == 0) revert NoBalance();\n\n        (bool success,) = _owner.call{value: amount}(\"\");\n        if (!success) revert TransferFailed();\n        emit Withdrawal(_owner, amount);\n    }\n\n    // ============ Ad Slot Management Functions ============\n\n    /// @dev Processes new ad slot creation\n    function createAdSlot(\n        string calldata adSlotName,\n        string calldata domainName,\n        uint adSlotWidth,\n        uint adSlotHeight\n    ) external override {\n        AdSlot newAdSlot = new AdSlot(payable(msg.sender), payable(address(this)));\n        address adSlotAddress = address(newAdSlot);\n\n        AdSlotInfo memory newAdSlotInfo = AdSlotInfo({\n            adSlotAddress: adSlotAddress,\n            adSlotName: adSlotName,\n            domainName: domainName,\n            adSlotWidth: adSlotWidth,\n            adSlotHeight: adSlotHeight\n        });\n\n        _adSlots[adSlotAddress] = newAdSlotInfo;\n        _adSlotAddresses.push(newAdSlotInfo);\n\n        emit AdSlotCreated(\n            adSlotAddress,\n            adSlotName,\n            domainName,\n            adSlotWidth,\n            adSlotHeight\n        );\n    }\n\n    // ============ Bidding Functions ============\n\n    /// @dev Processes new bid placement with validation\n    function placeBid(address adSlotAddress, string calldata adImageCID) external payable override {\n        IAdSlot adSlot = IAdSlot(adSlotAddress);\n        (, uint256 currentBidAmount, ,) = adSlot._currentBid();\n\n        if (msg.value <= currentBidAmount) revert LowBid();\n\n        adSlot.placeBid{value: msg.value}(msg.sender, adImageCID);\n        emit BidPlaced(adSlotAddress, msg.sender, msg.value);\n    }\n\n    // ============ Fee Management Functions ============\n\n    /// @dev Processes fee withdrawal from ad slot\n    function withdrawAdSlotFees(address adSlotAddress) external override {\n        IAdSlot adSlot = IAdSlot(adSlotAddress);\n        if (msg.sender != adSlot._owner()) revert OnlySlotOwner();\n        adSlot.withdrawFees();\n    }\n\n    /// @dev Processes fee withdrawal from multiple ad slots\n    function batchWithdrawAdSlotFees(address[] calldata adSlotAddresses) external override {\n        uint256 length = adSlotAddresses.length;\n        for(uint i = 0; i < length; i++) {\n            IAdSlot adSlot = IAdSlot(adSlotAddresses[i]);\n            if (msg.sender != adSlot._owner()) revert OnlySlotOwner();\n            adSlot.withdrawFees();\n        }\n    }\n\n    // ============ View Functions ============\n\n    /// @dev Returns information about current bid on specified ad slot\n    function getCurrentBidInfo(address adSlotAddress) external view override\n        returns (address bidder, uint256 amount, string memory adImageCID, uint256 timestamp) {\n        return IAdSlot(adSlotAddress)._currentBid();\n    }\n\n    /// @dev Returns information about specified ad slot\n    function getAdSlotInfo(address adSlotAddress) external view override returns (AdSlotInfo memory) {\n        return _adSlots[adSlotAddress];\n    }\n\n    /// @dev Returns all ad slots\n    function getAllAdSlots() external view override returns (AdSlotInfo[] memory) {\n        return _adSlotAddresses;\n    }\n}\n"
    },
    "contracts/interfaces/IAdSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\n/// @title IAdSlot\n/// @notice Interface defining core functionality for advertisement slot management\n/// @dev All function implementations should be provided by the implementing contract\ninterface IAdSlot {\n    // ============ Type Declarations ============\n\n    struct BidInfo {\n        address bidder;\n        uint256 amount;\n        string adImageCID;\n        uint256 timestamp;\n    }\n\n    // ============ State Variables ============\n\n    /// @notice Required state variables:\n    /// address payable public _owner;\n    /// address payable public immutable i_controllerContract;\n    /// BidInfo public _currentBid;\n    /// uint256 public _feeBalance;\n    /// uint256 public immutable i_deploymentBlock;\n\n    // ============ Events ============\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    event NewBid(address indexed bidder, uint256 bidAmount, string adImageCID);\n    event BidRefunded(address indexed bidder, uint256 amount);\n    event FeeWithdrawn(address indexed owner, uint256 amount);\n    event ControllerFeeTransferred(uint256 amount);\n\n    // ============ Functions ============\n\n    /// @notice Returns the current owner of the ad slot\n    function _owner() external view returns (address payable);\n\n    /// @notice Returns the controller contract address\n    function i_controllerContract() external view returns (address payable);\n\n    /// @notice Returns information about the current bid\n    function _currentBid() external view returns (\n        address bidder,\n        uint256 amount,\n        string memory adImageCID,\n        uint256 timestamp\n    );\n\n    /// @notice Returns the accumulated fee balance\n    function _feeBalance() external view returns (uint256);\n\n    /// @notice Returns the contract deployment block number\n    function i_deploymentBlock() external view returns (uint256);\n\n    /// @notice Transfers ownership of the ad slot\n    /// @param newOwner The address of the new owner\n    function transferOwnership(address payable newOwner) external;\n\n    /// @notice Places bid on the ad slot\n    /// @param bidder The address of the bidder\n    /// @param adImageCID The IPFS CID of the advertisement image\n    function placeBid(address bidder, string calldata adImageCID) external payable;\n\n    /// @notice Withdraws fees from the ad slot\n    function withdrawFees() external;\n}\n"
    },
    "contracts/interfaces/IAdSlotController.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\n/// @title IAdSlotController\n/// @notice Interface defining core functionality for managing multiple ad slots\n/// @dev Provides centralized management of ad slot creation and operations\ninterface IAdSlotController {\n    // ============ Type Declarations ============\n    \n    struct AdSlotInfo {\n        address adSlotAddress;\n        string adSlotName;\n        string domainName;\n        uint adSlotWidth;\n        uint adSlotHeight;\n    }\n\n    // ============ State Variables ============\n\n    /// @notice Required state variables:\n    /// address payable public _owner;\n    /// mapping(address => AdSlotInfo) public _adSlots;\n    /// AdSlotInfo[] private _adSlotAddresses;\n    /// uint256 public immutable i_deploymentBlock;\n\n    // ============ Events ============\n\n    event AdSlotCreated(\n        address indexed adSlotAddress,\n        string adSlotName,\n        string domainName,\n        uint adSlotWidth,\n        uint adSlotHeight\n    );\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    event BidPlaced(address indexed adSlotAddress, address indexed bidder, uint amount);\n    event Withdrawal(address indexed owner, uint amount);\n    event FeeReceived(address indexed from, uint amount);\n\n    // ============ Functions ============\n\n    /// @notice Returns the controller owner address\n    function _owner() external view returns (address payable);\n\n    /// @notice Returns information about the specified ad slot\n    function _adSlots(address) external view returns (\n        address adSlotAddress,\n        string memory adSlotName,\n        string memory domainName,\n        uint adSlotWidth,\n        uint adSlotHeight\n    );\n\n    /// @notice Returns the contract deployment block number\n    function i_deploymentBlock() external view returns (uint256);\n\n    /// @notice Returns all ad slot addresses and their information\n    function getAllAdSlots() external view returns (AdSlotInfo[] memory);\n\n    /// @notice Transfers ownership of the controller\n    function transferOwnership(address payable newOwner) external;\n\n    /// @notice Transfers ownership of the specified ad slot\n    function transferAdSlotOwnership(address adSlotAddress, address payable newOwner) external;\n\n    /// @notice Withdraws fees from the controller\n    function withdraw() external;\n\n    /// @notice Creates a new ad slot\n    function createAdSlot(\n        string calldata adSlotName,\n        string calldata domainName,\n        uint adSlotWidth,\n        uint adSlotHeight\n    ) external;\n\n    /// @notice Places bid on the specified ad slot\n    function placeBid(address adSlotAddress, string calldata adImageCID) external payable;\n\n    /// @notice Withdraws fees from the specified ad slot\n    function withdrawAdSlotFees(address adSlotAddress) external;\n\n    /// @notice Withdraws fees from multiple ad slots\n    function batchWithdrawAdSlotFees(address[] calldata adSlotAddresses) external;\n\n    /// @notice Returns information about the current bid on the specified ad slot\n    function getCurrentBidInfo(address adSlotAddress) external view \n        returns (address bidder, uint256 amount, string memory adImageCID, uint256 timestamp);\n\n    /// @notice Returns information about the specified ad slot\n    function getAdSlotInfo(address adSlotAddress) external view returns (AdSlotInfo memory);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}